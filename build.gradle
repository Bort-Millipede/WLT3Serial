repositories {
	mavenCentral()
}

apply plugin: 'base'
apply plugin: 'java'

version = 0.4
sourceCompatibility = 1.7
def libsDir = new File(project.buildDir,'libs')
def wlt3ClassesDir = new File(project.buildDir,'classes/java/main/bort/millipede/wlt3')

//get local IP address of host executing gradle build process
def getLocalIP() {
	Enumeration<NetworkInterface> ifaces = NetworkInterface.getNetworkInterfaces();
	while(ifaces.hasMoreElements()) {
		NetworkInterface iface = ifaces.nextElement();
		if(iface.isUp() && !iface.isLoopback()) {
			Enumeration<InetAddress> addrs = iface.getInetAddresses();
			while(addrs.hasMoreElements()) {
				String addr = addrs.nextElement().getHostAddress();
				if(!addr.contains(":")) {
					return addr
				}
			}
		}
	}
}

dependencies {
	compile fileTree(dir: project.buildDir.absolutePath+"/libs", include: ["ysoserial*.jar","wlthint3client*.jar"])
	testCompile "junit:junit:4.12"
}

sourceSets {
	main {
		java {
			srcDir 'src'
		}
	}
	test {
		java {
			srcDir 'tests'
		}
	}
}

task prepare {
	doLast {
		project.mkdir(project.buildDir)
		libsDir.mkdirs()
		wlt3ClassesDir.mkdirs()
	}
}

task getYSS {
	doLast {
		FileTree tree = fileTree(dir: libsDir, include: ['ysoserial*.jar'])
		if(tree.isEmpty()) {
			println "downloading ysoserial v0.0.5"
			File ysJar = new File(libsDir,'ysoserial-v0.0.5.jar')
			new URL('https://jitpack.io/com/github/frohoff/ysoserial/v0.0.5/ysoserial-v0.0.5.jar').withInputStream{ i -> ysJar.withOutputStream{ it << i }}
		}
	}
}

task checkWLClient {
	doLast {
		FileTree tree = fileTree(dir: libsDir, include: ['wlthint3client*.jar'])
		if(tree.isEmpty()) {
			throw new GradleException("Required jar file wlthint3client.jar not present in "+libsDir.absolutePath+" directory! Build cannot continue!\n\n"+
				"Download wls1036_dev.zip file from http://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-main-097127.html (\"Zip distribution for Mac OSX, Windows, and Linux\" under \"Oracle WebLogic Server 10.3.6\" section) and extract wlthint3client.jar (/wlserver/server/lib/wlthint3client.jar) file into "+libsDir.absolutePath+" directory!")
		}
	}
}

getYSS.dependsOn prepare
checkWLClient.dependsOn getYSS
compileJava.dependsOn checkWLClient

//disabled for now, may be removed later.
/*task fatJar(type: Jar) {
	manifest {
		attributes 'Main-Class': 'bort.millipede.wlt3.WLT3Serial'
	}
	baseName = project.name + '-full'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}*/

/*
parameters (specified at runtime with "gradle -Dparam=val test"):
(required)
wlt3.target.host: target host to use
wlt3.target.t3.port: T3 port to use on target host
wlt3.target.t3s.port: T3S port to use on target hosts
(optional)
wlt3.test.server.port: local port for web server to listen on
wlt3.test.tries: number of times to verify whether target system has accessed local web server
wlt3.test.verbose: verbose WLT3Serial output (true or false)
*/
test {
	useJUnit {
		//required test input properties
		systemProperty "wlt3.target.host", System.getProperty("wlt3.target.host")
		systemProperty "wlt3.target.t3.port", System.getProperty("wlt3.target.t3.port")
		systemProperty "wlt3.target.t3s.port", System.getProperty("wlt3.target.t3s.port")
		systemProperty "localhost.ip", getLocalIP()
		
		//optional test input properties
		def serverPort = System.getProperty("wlt3.test.server.port")
		if(serverPort != null) systemProperty "wlt3.test.server.port", serverPort
		def tries = System.getProperty("wlt3.test.tries")
		if(tries != null) systemProperty "wlt3.test.tries", tries
		def verbose = System.getProperty("wlt3.test.verbose")
		if(verbose != null) systemProperty "wlt3.test.verbose", verbose
		
		forkEvery = 1
		scanForTestClasses = true
		testLogging.showStandardStreams = true
	}
	testLogging {
		exceptionFormat "full"
	}
}

